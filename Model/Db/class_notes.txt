Notes on Bluewater_DB, and its offspring, based upon my readings of:
 * "Patterns of Enterprise Application Development", Martin Fowler, 2002, Addison-Wesley Signature Series
 * "Advanced PHP Programming", George Schlossnagle, 2004, Sam Publishing; Developers Library Press
 * 

Several books on advanved PHP development, MVC methodologies, even Java and C++, discuss various types of "patterns" designed for database access.

Ad Hoc Queries.
Many authors discuss the evils of this "method" (it's not really a pattern per-say), that it can leach into your code base, all with the best of intensions, and spread like a virus before you realize it.

On this point I agree. I've never been a fan of "ad hoc" queries littered here and there across a code base. Database access should be localized into "model" classes. I'll come back to this point in a bit.

Active Record Pattern
"Advanced PHP Programming" speaks of an "Active Record Pattern." (Best defined in "Patterns of Enterprise Application Development") I found his description very interesting as it mimics my approach to a "tee". The code examples are obviously simplified illustrations, the ideas are sound and very flexible.

(Sometimes I wish I had taken proper computer theory, that way I wouldn't have been wasting my time re-inventing these wheels on my own. I would have know about this basic concepts and could have gone on to better things sooner!)

Bluewater_DB_Table_Abstract, for the most part can be called an "Active Record" pattern. Each class encapsulates a particular database table and all the idioscrincies of that table. George calls this pattern a "simple correspondence with individual database rows." On one hand, I agree, but on the other, I find that I can can do just about anything I need to do with data access and modification using a modified version of this pattern.

The main class of this "family" is Bluewater_DB_Table_Abstract. As you can assertain from its name, this class abstracts table access and control. Each table within an applications database will need to create a class that extends this abstract class...

   My_DB_Users extends Bluewater_DB_Table_Abstract

At a minimum, this new class needs to define the table name it represents. From there, this class can grow in sophistication as requirements dictate. This class will "know" all there is to know about what this table needs and how to handle its data.

(Integrated) Mapper Pattern
Once again I draw upon "Advanced PHP Programming". George outlines the concept of a "Mapper Pattern" that is "decoupled" from the table class. One (Table Class) deals with data and the other (Mapper Class) handles database access, queries and the like.
  
Then he introduces his "Integrated Mapper Pattern." This simply merges the "Active Pattern" and the "Mapper" into a single pattern. It handles a "lose couplng" of the class to the schema.

Bluewater takes this a step further. "Bluewater_DB_Table_Abstract" handles all the base table access methods. Nothing complicated, nothing fancy. Just take the data in the class and INSERT a new record or UPDATE an exsiting, as the case may be. Find a record, or records from various common fields, ID, NAME, ACTIVE, among other things (see actual class file for details). When a table class is created and this class is extended, the individual table class handles specific and special "features" of that table. It may override a given base method, or it may overload it. All depending on what is needed for that table.

As an aside, if multiple database access is needed, simply extend Bluewater_DB_Table_Abstract with a application specific DB Table Abstract and define the database to access. Than any table classes from that point can extend this new Abstract class and access the desired database at will.

 